version: '3.7'
services:

  mongo:
   container_name: mongo
   image: mongo:latest
   restart: always
   ports:
     - "27017:27017"
   expose:
     - "27017"
   volumes:
     - data-volume:/data/db
   networks:
     - mynetwork

  mysqldb:
    container_name: mysqldb
    image: "mysql:8.0"
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: order_service
      MYSQL_ROOT_PASSWORD: 123456
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
      retries: 5
    volumes:
      - mysql-data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d/
    networks:
      - mynetwork

  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
    - mynetwork

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8.0
    restart: always
    ports:
    - "3307:3306"
    environment:
     MYSQL_ROOT_PASSWORD: root
     MYSQL_DATABASE: keycloak
     MYSQL_USER: keycloak
     MYSQL_PASSWORD: root
    volumes:
     - mysql_keycloak_data:/var/lib/mysql
    networks:
     - mynetwork

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql  # Ensure correct reference to MySQL service
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: root
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: rabbitmq
    ports:
    - 5672:5672
    - 15672:15672

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - mynetwork

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mynetwork

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - mynetwork

networks:
  mynetwork:

volumes:
  mysql-data:
  data-volume:
  mysql_keycloak_data:
